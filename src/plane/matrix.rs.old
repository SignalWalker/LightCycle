use std::fmt::Debug;
use std::ops::{Index, Mul, MulAssign};

use super::*;

pub type DPoint2 = Point2<f64>;

#[derive(Copy, Clone)]
pub struct Matrix3([f64; 9]);

impl Matrix3 {
    pub fn identity() -> Matrix3 {
        Matrix3([1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
    }

    pub fn translate(by: DPoint2) -> Matrix3 {
        Matrix3([1.0, 0.0, by[0], 0.0, 1.0, by[1], 0.0, 0.0, 1.0])
    }

    pub fn scale_basic(amt: DPoint2) -> Matrix3 {
        Matrix3([amt[0], 0.0, 0.0, 0.0, amt[1], 0.0, 0.0, 0.0, 1.0])
    }

    pub fn rot_basic(rad: f64) -> Matrix3 {
        Matrix3([
            rad.cos(),
            rad.sin(),
            0.0,
            -(rad.sin()),
            rad.cos(),
            0.0,
            0.0,
            0.0,
            1.0,
        ])
    }

    pub fn scale(amt: DPoint2, center: DPoint2) -> Matrix3 {
        Matrix3::translate(center) * Matrix3::scale_basic(amt) * Matrix3::translate(-center)
    }

    pub fn rotate(deg: f64, center: DPoint2) -> Matrix3 {
        Matrix3::translate(center) * Matrix3::rot_basic(deg) * Matrix3::translate(-center)
    }

    // Persp Proj: [Xe Ye Ze 1] = [Xw Yw Zw 1][V]
    // Xs = (DXe / SZe) Vsx + Vcx
    // Ys = (DYe / SZe) Vsy + Vcy
}

impl Debug for Matrix3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> Result<(), std::fmt::Error> {
        write!(f, "{:?}", [self[0], self[1], self[2]]);
        writeln!(f, "{:?}", [self[3], self[4], self[5]]);
        writeln!(f, "{:?}", [self[6], self[7], self[8]]);
        Ok(())
    }
}

impl Default for Matrix3 {
    fn default() -> Matrix3 {
        Matrix3([0.0; 9])
    }
}

impl Index<usize> for Matrix3 {
    type Output = f64;
    fn index(&self, index: usize) -> &f64 {
        &self.0[index]
    }
}

impl Index<(usize, usize)> for Matrix3 {
    type Output = f64;
    fn index(&self, index: (usize, usize)) -> &f64 {
        &self.0[index.0 + index.1 * 3]
    }
}

impl Mul for Matrix3 {
    type Output = Self;
    fn mul(self, r: Self) -> Self {
        Matrix3([
            self[0] * r[0] + self[1] * r[3] + self[2] * r[6],
            self[0] * r[1] + self[1] * r[4] + self[2] * r[7],
            self[0] * r[2] + self[1] * r[5] + self[2] * r[8],
            self[3] * r[0] + self[4] * r[3] + self[5] * r[6],
            self[3] * r[1] + self[4] * r[4] + self[5] * r[7],
            self[3] * r[2] + self[4] * r[5] + self[5] * r[8],
            self[6] * r[0] + self[7] * r[3] + self[8] * r[6],
            self[6] * r[1] + self[7] * r[4] + self[8] * r[7],
            self[6] * r[2] + self[7] * r[5] + self[8] * r[8],
        ])
    }
}

impl MulAssign for Matrix3 {
    fn mul_assign(&mut self, r: Self) {
        *self = *self * r
    }
}
